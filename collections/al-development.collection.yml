id: al-development
name: AL Development for Business Central
description: AI Native Development toolkit implementing the A-Instructions Architecture framework with 29 Agent Primitives across 3 systematic layers. Provides Markdown Prompt Engineering through Instructions files, Agentic Workflows via prompts, and Context Engineering through applyTo patterns for optimal LLM performance in Business Central development.
tags: [al, business-central, dynamics365, erp, microsoft, ai-native, a-instructions, agent-primitives, context-engineering, copilot]

items:
    # Layer 2: Agent Primitives - Instructions (7 files)
    # Context Engineering via applyTo patterns for modular context loading
  - path: instructions/al-guidelines.instructions.md
    kind: instruction
  - path: instructions/al-code-style.instructions.md
    kind: instruction
  - path: instructions/al-naming-conventions.instructions.md
    kind: instruction
  - path: instructions/al-performance.instructions.md
    kind: instruction
  - path: instructions/al-error-handling.instructions.md
    kind: instruction
  - path: instructions/al-events.instructions.md
    kind: instruction
  - path: instructions/al-testing.instructions.md
    kind: instruction

  # Layer 2: Agent Primitives - Agentic Workflows (14 files)
  # Complete systematic processes with validation gates and AL tool access
  - path: prompts/al-initialize.prompt.md
    kind: prompt
  - path: prompts/al-diagnose.prompt.md
    kind: prompt
  - path: prompts/al-build.prompt.md
    kind: prompt
  - path: prompts/al-events.prompt.md
    kind: prompt
  - path: prompts/al-performance.prompt.md
    kind: prompt
  - path: prompts/al-performance.triage.prompt.md
    kind: prompt
  - path: prompts/al-permissions.prompt.md
    kind: prompt
  - path: prompts/al-migrate.prompt.md
    kind: prompt
  - path: prompts/al-pages.prompt.md
    kind: prompt
  - path: prompts/al-spec.create.prompt.md
    kind: prompt
  - path: prompts/al-pr-prepare.prompt.md
    kind: prompt
  - path: prompts/al-copilot-capability.prompt.md
    kind: prompt
  - path: prompts/al-copilot-promptdialog.prompt.md
    kind: prompt
  - path: prompts/al-copilot-test.prompt.md
    kind: prompt
  - path: prompts/al-translate.prompt.md
    kind: prompt

  # Layer 2: Agent Primitives - Chat Modes (6 files)
  # Role-based specialists with MCP tool boundaries preventing cross-domain operations
  - path: chatmodes/al-orchestrator.chatmode.md
    kind: chat-mode
    usage: recommended
    description: |
      Strategic router and workflow coordinator implementing Markdown Prompt Engineering principles. This is your entry point for complex tasks - it analyzes requirements and orchestrates the right combination of Agent Primitives (Instructions, Workflows, Chat Modes) for optimal results.

      Orchestrates Agent Primitives through:
      - Context Loading - Analyzes requirements and loads relevant Instructions
      - Workflow Routing - Recommends appropriate Agentic Workflows for execution
      - Mode Coordination - Routes to specialized Chat Modes for strategic work
      - Multi-Phase Planning - Creates systematic workflows for complex features

      Implements Context Engineering by:
      - Selective primitive activation based on task complexity
      - Preventing context window pollution through strategic routing
      - Recommending parallel vs sequential execution patterns

      Example usage:
      ```markdown
      ---
      mode: al-orchestrator
      title: Build AI-powered API for sales forecasting
      ---
      
      I need to create an API that uses AI to forecast sales based on historical data.
      I'm not sure where to start or which tools I need.
      ```

      To get the best results:
      - Provide context about what you're trying to accomplish
      - Mention any constraints (timeline, existing code, team size)
      - Let the orchestrator analyze before jumping into implementation

  - path: chatmodes/al-architect.chatmode.md
    kind: chat-mode
    usage: recommended
    description: |
      Solution architecture and design specialist applying Markdown Prompt Engineering for structured technical decision-making. Uses semantic markdown (headers, lists, links) to create clear architectural documentation and design rationale.

      Tool Boundaries (professional licensing model):
      - CAN: Design solutions, analyze patterns, recommend approaches
      - CANNOT: Execute builds, deploy code, run tests (delegates to workflows)

      Auto-loads Instructions for context:
      - al-guidelines.instructions.md (BC architectural patterns)
      - al-code-style.instructions.md (feature-based structure)
      - al-performance.instructions.md (scalability considerations)

      Ideal for (strategic thinking, not execution):
      - Planning new feature architecture
      - Designing data models and table structures
      - Evaluating integration strategies
      - Making strategic technical decisions
      - Reviewing and refactoring existing designs

      Example usage:
      ```markdown
      ---
      mode: al-architect
      title: Design multi-company approval workflow
      ---
      
      #file: src/Sales/SalesHeader.Table.al
      #file: src/Approval/ApprovalEntry.Table.al
      
      Design an approval workflow system that:
      - Works across multiple companies
      - Supports delegation
      - Sends email notifications
      - Integrates with existing sales documents
      ```

      To get the best results:
      - Include relevant existing code in context
      - Specify business requirements clearly
      - Mention scalability and data volume expectations
      - Ask about alternatives and trade-offs

  - path: chatmodes/al-debugger.chatmode.md
    kind: chat-mode
    usage: optional
    description: |
      Systematic debugging specialist applying Markdown Prompt Engineering for structured problem diagnosis. Uses semantic markdown to create clear diagnostic trees and root cause analysis documentation.

      Tool Boundaries (professional licensing model):
      - CAN: Analyze issues, diagnose root causes, recommend fixes
      - CANNOT: Execute code, run debuggers directly (recommends workflows)

      Recommends Agentic Workflows:
      - al-debug.prompt.md (for attaching debugger)
      - al-performance.prompt.md (for profiling bottlenecks)
      - al-troubleshoot.prompt.md (for common patterns)

      Ideal for (diagnosis, not execution):
      - Diagnosing bugs and unexpected behavior
      - Root cause analysis of complex issues
      - Investigating intermittent problems
      - Understanding code execution flow
      - Performance bottleneck identification

      Example usage:
      ```markdown
      ---
      mode: al-debugger
      title: Debug event subscriber not firing
      ---
      
      #file: src/Sales/SalesEventHandler.Codeunit.al
      
      My OnBeforePostSalesDoc event subscriber isn't being called.
      The signature looks correct but it never executes.
      ```

      To get the best results:
      - Include error messages and symptoms
      - Share relevant code in context
      - Describe steps to reproduce
      - Mention what you've already tried

  - path: chatmodes/al-tester.chatmode.md
    kind: chat-mode
    usage: optional
    description: |
      Testing strategy and TDD specialist applying Markdown Prompt Engineering for structured test planning. Uses semantic markdown to create clear test scenarios and coverage matrices.

      Tool Boundaries (professional licensing model):
      - CAN: Design test strategies, plan scenarios, review coverage
      - CANNOT: Execute tests, run code (delegates to workflows)

      Auto-loads Instructions for context:
      - al-testing.instructions.md (AL-Go structure, test patterns)
      
      Implements Context Engineering:
      - Only generates tests when explicitly requested
      - Preserves context for test design over implementation

      Ideal for (strategy, not execution):
      - Designing test strategies
      - Implementing test-driven development (TDD)
      - Creating comprehensive test suites
      - Improving test coverage
      - Setting up test automation

      Example usage:
      ```markdown
      ---
      mode: al-tester
      title: Create test suite for sales posting logic
      ---
      
      #file: src/Sales/SalesPost.Codeunit.al
      
      I need comprehensive tests for the sales posting logic.
      What test scenarios should I cover?
      ```

      To get the best results:
      - Share the code you want to test
      - Specify if you want unit, integration, or UI tests
      - Mention any specific edge cases to cover
      - Indicate your test coverage goals

  - path: chatmodes/al-api.chatmode.md
    kind: chat-mode
    usage: optional
    description: |
      RESTful API design specialist applying Markdown Prompt Engineering for structured API contracts. Uses semantic markdown to create clear endpoint documentation and integration patterns.

      Tool Boundaries (professional licensing model):
      - CAN: Design APIs, plan endpoints, document contracts
      - CANNOT: Execute builds, test APIs directly (recommends workflows)

      Auto-loads Instructions for context:
      - al-error-handling.instructions.md (proper error responses)
      - al-performance.instructions.md (API optimization patterns)

      Recommends Agentic Workflows:
      - al-permissions.prompt.md (for API security setup)
      - al-build.prompt.md (for deployment)

      Ideal for (design and implementation guidance):
      - Designing API endpoints and contracts
      - Implementing API pages (v2.0)
      - Setting up authentication and security
      - API versioning strategies
      - External system integrations

      Example usage:
      ```markdown
      ---
      mode: al-api
      title: Create API for mobile app integration
      ---
      
      I need to expose sales orders to a mobile app.
      The app needs to:
      - List orders by customer
      - Get order details with lines
      - Create new orders
      - Update order status
      ```

      To get the best results:
      - Describe the API consumer (mobile app, external system, etc.)
      - Specify required operations (CRUD, custom actions)
      - Mention authentication requirements
      - Include performance expectations

  - path: chatmodes/al-copilot.chatmode.md
    kind: chat-mode
    usage: optional
    description: |
      AI-powered feature specialist applying advanced Markdown Prompt Engineering for Copilot experiences. Expert in prompt engineering patterns, context loading strategies, and responsible AI implementation.

      Tool Boundaries (professional licensing model):
      - CAN: Design AI features, engineer prompts, plan integrations
      - CANNOT: Execute code, deploy services (recommends workflows)

      Coordinates with other Agent Primitives:
      - al-architect.chatmode.md (for AI integration architecture)
      - al-error-handling.instructions.md (for AI service failures)

      Implements meta-level Context Engineering:
      - Designs prompt engineering patterns for end-user Copilot features
      - Plans context optimization strategies for AI features

      Ideal for (AI feature design and prompt engineering):
      - Designing Copilot user experiences
      - Implementing Azure OpenAI integration
      - Prompt engineering for business scenarios
      - Creating AI-powered suggestions and insights
      - Implementing responsible AI practices

      Example usage:
      ```markdown
      ---
      mode: al-copilot
      title: Add AI sales forecasting to customer card
      ---
      
      I want to add an AI-powered sales forecast feature that:
      - Analyzes historical sales data
      - Provides monthly forecasts
      - Suggests optimal order quantities
      - Explains its reasoning
      ```

      To get the best results:
      - Describe the AI feature from user perspective
      - Specify what data the AI should analyze
      - Mention desired output format
      - Include any responsible AI considerations
      - Ask about prompt engineering best practices

display:
  ordering: manual
  show_badge: true